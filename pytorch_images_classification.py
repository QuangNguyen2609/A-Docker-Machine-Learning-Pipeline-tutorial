# -*- coding: utf-8 -*-
"""Pytorch images classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/175uTGF7_dJ29J26W9yZ_X0_Svn67JOcM
"""

# Import library
import torch
import torch.nn as nn
import torch
import torch.optim as optim
import torch.nn.functional as F

from torchvision import datasets, models, transforms
from torch.utils.data import DataLoader, Dataset

import numpy as np

from PIL import Image

import os
import glob

# !unzip cats_and_dogs_filtered.zip

# Chọn thiết bị để huấn luyện mô hình
device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

# Tạo list đường dẫn ảnh train
train_cats_dir = './train/cats'
train_dogs_dir = './train/dogs'

train_list_dogs = glob.glob(os.path.join(train_cats_dir,'*.jpg'))
train_list_cats = glob.glob(os.path.join(train_dogs_dir, '*.jpg'))

train_list = train_list_dogs + train_list_cats

# Tạo list đường dẫn ảnh test
test_cats_dir = './validation/cats'
test_dogs_dir = './validation/dogs'

test_list_dogs = glob.glob(os.path.join(test_cats_dir,'*.jpg'))
test_list_cats = glob.glob(os.path.join(test_dogs_dir, '*.jpg'))

test_list = test_list_dogs + test_list_cats

# Hàm load dataset
class CustomImageDataset(Dataset):
    def __init__(self, img_list, transform):
        self.img_list = img_list
        self.transform = transform

    def __len__(self):
        return len(self.img_list)

    def __getitem__(self, idx):
        img_path = self.img_list[idx]
        image = Image.open(img_path)
        image = self.transform(image)
        label = img_path.split('/')[-1].split('.')[0]
        if label == 'dog':
            label = 1
        else:
            label = 0
        return image, label

# Augmentation images
transform_train = transforms.Compose([   
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor()
    ])

transform_test = transforms.Compose([   
    transforms.Resize((224, 224)),
    transforms.ToTensor()
    ])

# Load ảnh, augmentation và tạo batch size
training_data = CustomImageDataset(train_list, transform_train)
test_data = CustomImageDataset(test_list, transform_test)

print('Number of training: {}'.format(len(training_data)))
print('Number of validation: {}'.format(len(test_data)))


train_dataloader = DataLoader(training_data, batch_size=64, shuffle=True)
test_dataloader = DataLoader(test_data, batch_size=64, shuffle=True)

# Viết model
class CNN(nn.Module):
    def __init__(self):
        super(CNN,self).__init__()
        
        self.layer1 = nn.Sequential(
            nn.Conv2d(3,16,kernel_size=3, padding=0,stride=2),
            nn.BatchNorm2d(16),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )
        
        self.layer2 = nn.Sequential(
            nn.Conv2d(16,32, kernel_size=3, padding=0, stride=2),
            nn.BatchNorm2d(32),
            nn.ReLU(),
            nn.MaxPool2d(2)
            )
        
        self.layer3 = nn.Sequential(
            nn.Conv2d(32,64, kernel_size=3, padding=0, stride=2),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )
        
        self.flatten = nn.Flatten()
        self.fc1 = nn.Linear(3*3*64,10)
        self.dropout = nn.Dropout(0.5)
        self.fc2 = nn.Linear(10,2)
        self.relu = nn.ReLU()
        
        
    def forward(self,x):
        out = self.layer1(x)
        out = self.layer2(out)
        out = self.layer3(out)
        out = out.view(out.size(0),-1)
        out = self.relu(self.fc1(out))
        out = self.fc2(out)
        return out

model = CNN()
model.to(device)

# Cài đặt các tham số khi train
learning_rate = 0.001
epochs = 30

# Viết hàm train và hàm test
def train_loop(dataloader, model, loss_fn, optimizer):
    size = len(dataloader.dataset)
    for batch, (X, y) in enumerate(dataloader):
        # Compute prediction and loss
        X = X.to(device)
        y = y.to(device)
        pred = model(X)
        loss = loss_fn(pred, y)

        # Backpropagation
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if batch % 100 == 0:
            loss, current = loss.item(), batch * len(X)
            print(f"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]")


def test_loop(dataloader, model, loss_fn):
    size = len(dataloader.dataset)
    num_batches = len(dataloader)
    test_loss, correct = 0, 0

    with torch.no_grad():
        for X, y in dataloader:
            X = X.to(device)
            y = y.to(device)
            pred = model(X)
            test_loss += loss_fn(pred, y).item()
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()

    test_loss /= num_batches
    correct /= size
    print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")

loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(lr=learning_rate, params = model.parameters())

for t in range(epochs):
    print(f"Epoch {t+1}\n-------------------------------")
    train_loop(train_dataloader, model, loss_fn, optimizer)
    test_loop(test_dataloader, model, loss_fn)
print("Done!")

torch.save(model, 'model.pth')